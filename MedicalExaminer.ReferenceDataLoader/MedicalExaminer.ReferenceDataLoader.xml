<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MedicalExaminer.ReferenceDataLoader</name>
    </assembly>
    <members>
        <member name="T:MedicalExaminer.ReferenceDataLoader.Loaders.LocationsChecker">
            <summary>
            Check that locations are in consistent state
            </summary>
        </member>
        <member name="M:MedicalExaminer.ReferenceDataLoader.Loaders.LocationsChecker.#ctor(System.Collections.Generic.List{MedicalExaminer.Models.Location})">
            <summary>
            Initializes a new instance of the <see cref="T:MedicalExaminer.ReferenceDataLoader.Loaders.LocationsChecker"/> class.
            </summary>
            <param name="locations">The locations.</param>
        </member>
        <member name="M:MedicalExaminer.ReferenceDataLoader.Loaders.LocationsChecker.RunAllChecks">
            <summary>
            Run all check methods
            </summary>
            <returns>Boolean representing all checks have passed</returns>
        </member>
        <member name="M:MedicalExaminer.ReferenceDataLoader.Loaders.LocationsChecker.CheckParentIdsValid">
            <summary>
            Check that every location has a parentId links to another location, except the national location where parentD
            should be null
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:MedicalExaminer.ReferenceDataLoader.Loaders.LocationsChecker.CheckAllLocationIdsAreUnique">
            <summary>
            Check LocationId is unique for each location
            </summary>
            <returns>Boolean Check all location IDs are unique</returns>
        </member>
        <member name="M:MedicalExaminer.ReferenceDataLoader.Loaders.LocationsChecker.CheckLocationIdsNotNull">
            <summary>
            Check that no locationId value is null
            </summary>
            <returns>Boolean Location IDs are not null</returns>
        </member>
        <member name="T:MedicalExaminer.ReferenceDataLoader.Loaders.LocationsLoader">
            <summary>
                Create collection in CosmosDB and load with locations extracted from input file
            </summary>
        </member>
        <member name="M:MedicalExaminer.ReferenceDataLoader.Loaders.LocationsLoader.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:MedicalExaminer.ReferenceDataLoader.Loaders.LocationsLoader"/> class.
            </summary>
            <param name="args">0: endpoint; 1: primary key; 3: databaseId; 4: import file; 5: container id</param>
            <remarks>Set up details of Cosmos DB and connection to write to</remarks>
        </member>
        <member name="M:MedicalExaminer.ReferenceDataLoader.Loaders.LocationsLoader.Load">
            <summary>
                Create collection on database and load locations into it
            </summary>
            <returns>Task</returns>
        </member>
        <member name="M:MedicalExaminer.ReferenceDataLoader.Loaders.LocationsLoader.LoadLocations">
            <summary>
            Load each location in import file into container on Cosmos DB
            </summary>
            <returns>Task.</returns>
            <remarks>Report progress to Console every time 1000 locations loaded</remarks>
        </member>
        <member name="M:MedicalExaminer.ReferenceDataLoader.Loaders.LocationsLoader.CreateCollection">
            <summary>
                Create collection in database
            </summary>
            <returns>Task</returns>
        </member>
        <member name="M:MedicalExaminer.ReferenceDataLoader.Loaders.LocationsLoader.LoadImportFile">
            <summary>
                Load contents of json import file into list of location objects
            </summary>
        </member>
        <member name="M:MedicalExaminer.ReferenceDataLoader.Loaders.LocationsLoader.ValidateLocations">
            <summary>
                Validate that all locations are consistent and correct
            </summary>
            <remarks>Expect this to throw an exception if locations are not valid. This exception will be handled by calling code</remarks>
        </member>
        <member name="T:MedicalExaminer.ReferenceDataLoader.Program">
            <summary>
            Program Entry Point.
            </summary>
        </member>
    </members>
</doc>
