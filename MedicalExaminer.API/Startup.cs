using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Text;
using AutoMapper;
using MedicalExaminer.API.Extensions.Data;
using MedicalExaminer.API.Filters;
using MedicalExaminer.API.Helpers;
using MedicalExaminer.API.Services;
using MedicalExaminer.API.Services.Implementations;
using MedicalExaminer.Common;
using MedicalExaminer.Common.ConnectionSettings;
using MedicalExaminer.Common.Database;
using MedicalExaminer.Common.Loggers;
using MedicalExaminer.Common.Queries.Examination;
using MedicalExaminer.Common.Queries.PatientDetails;
using MedicalExaminer.Common.Services;
using MedicalExaminer.Common.Services.Examination;
using MedicalExaminer.Common.Services.PatientDetails;
using MedicalExaminer.Models;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.IdentityModel.Tokens;
using Swashbuckle.AspNetCore.Swagger;

namespace MedicalExaminer.API
{
    /// <summary>
    /// Startup
    /// </summary>
    public class Startup
    {
        /// <summary>
        /// Key for Authentication Section
        /// </summary>
        private const string AuthenticationSection = "Authentication";

        /// <summary>
        /// Initialise a new instance of the <see cref="Startup"/> class.
        /// </summary>
        /// <param name="configuration">The Configuration.</param>
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        /// <summary>
        /// Gets configuration.
        /// </summary>
        public IConfiguration Configuration { get; }

        /// <summary>
        /// Add services to the container.
        /// </summary>
        /// <param name="services">Service Collection.</param>
        public void ConfigureServices(IServiceCollection services)
        {
            // Basic authentication service
            ConfigureAuthenticationSettings(services);
            ConfigureAuthentication(services);
            services.AddScoped<IAuthenticationService, AuthenticationService>();

            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);

            Mapper.Initialize(config =>
            {
                config.AddMedicalExaminerProfiles();
            });

            services.AddAutoMapper();

            // Register the Swagger generator, defining 1 or more Swagger documents
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new Info { Title = "Medical Examiner Data API", Version = "v1" });
                
                // Make all enums appear as strings
                c.DescribeAllEnumsAsStrings();

                // Locate the XML file being generated by ASP.NET.
                var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.XML";
                var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

                // Swagger to use those XML comments.
                c.IncludeXmlComments(xmlPath);

                // Make swagger do authentication
                var security = new Dictionary<string, IEnumerable<string>>
                {
                    { "Bearer", System.Array.Empty<string>() },
                };

                c.AddSecurityDefinition("Bearer", new ApiKeyScheme
                {
                    Description = "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
                    Name = "Authorization",
                    In = "header",
                    Type = "apiKey"
                });
                c.AddSecurityRequirement(security);
            });

            services.AddScoped<AppointmentDateResolver>(s => new AppointmentDateResolver(new AppointmentFinder()));
            //services.AddScoped<AppointmentFinder>(s=> new AppointmentFinder());
            services.AddScoped<IMELogger, MELogger>();
            services.AddScoped<IDatabaseAccess, DatabaseAccess>();
            services.AddScoped<ILocationConnectionSettings>(s => new LocationConnectionSettings(
                new Uri(Configuration["CosmosDB:URL"]),
                Configuration["CosmosDB:PrimaryKey"],
                Configuration["CosmosDB:DatabaseId"]));

            services.AddScoped<IExaminationConnectionSettings>(s => new ExaminationConnectionSettings(
                new Uri(Configuration["CosmosDB:URL"]),
                Configuration["CosmosDB:PrimaryKey"],
                Configuration["CosmosDB:DatabaseId"]));


            services.AddScoped<IAsyncQueryHandler<CreateExaminationQuery, Examination>, CreateExaminationService>();
            services.AddScoped<IAsyncQueryHandler<ExaminationRetrievalQuery, Examination>, ExaminationRetrievalService>();
            services.AddScoped<IAsyncQueryHandler<ExaminationsRetrievalQuery, IEnumerable<Examination>>, ExaminationsRetrievalService>();
            services.AddScoped<IAsyncQueryHandler<PatientDetailsUpdateQuery, Examination>, PatientDetailsUpdateService>();
            services.AddScoped<IAsyncQueryHandler<PatientDetailsByCaseIdQuery, Examination>, PatientDetailsRetrievalService>();
            services.AddScoped<ControllerActionFilter>();
            
            services.AddScoped<ILocationPersistence>(s => new LocationPersistence(
                 new Uri(Configuration["CosmosDB:URL"]),
                 Configuration["CosmosDB:PrimaryKey"],
                 Configuration["CosmosDB:DatabaseId"]));

            services.AddScoped<IUserPersistence>(s => new UserPersistence(
                new Uri(Configuration["CosmosDB:URL"]),
                Configuration["CosmosDB:PrimaryKey"],
                Configuration["CosmosDB:DatabaseId"]));

            services.AddScoped<IMeLoggerPersistence>(s => new MeLoggerPersistence(
                new Uri(Configuration["CosmosDB:URL"]),
                Configuration["CosmosDB:PrimaryKey"],
                Configuration["CosmosDB:DatabaseId"]));

            services.AddScoped<IPermissionPersistence>(s => new PermissionPersistence(
                new Uri(Configuration["CosmosDB:URL"]),
                Configuration["CosmosDB:PrimaryKey"],
                Configuration["CosmosDB:DatabaseId"]));

            
        }

        /// <summary>
        /// Configure the HTTP request pipeline.
        /// </summary>
        /// <param name="app">The App.</param>
        /// <param name="env">The Environment.</param>
        /// <param name="loggerFactory">The Logger Factory.</param>
        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler(appBuilder =>
                {
                    appBuilder.Run(async context =>
                    {
                        context.Response.StatusCode = 500;
                        await context.Response.WriteAsync("An unexpected fault happened. Try again later.");
                    });
                });
            }

            app.UseHttpsRedirection();
            loggerFactory.AddConsole(Configuration.GetSection("Logging"));
            loggerFactory.AddDebug();

            if (env.IsDevelopment())
            {
                // Enable middleware to serve generated Swagger as a JSON endpoint.
                app.UseSwagger();

                // Enable middleware to serve swagger-ui (HTML, JS, CSS, etc.),
                // specifying the Swagger JSON endpoint.
                app.UseSwaggerUI(c => { c.SwaggerEndpoint("/swagger/v1/swagger.json", "My API V1"); });
            }

            // Must be above use mvc
            app.UseAuthentication();

            app.UseMvc();
        }

        /// <summary>
        /// Configure Authentication settings so we can use it elsewhere in the app using DI.
        /// </summary>
        /// <param name="services">Services.</param>
        private void ConfigureAuthenticationSettings(IServiceCollection services)
        {
            var authenticationSection = Configuration.GetSection(AuthenticationSection);
            services.Configure<AuthenticationSettings>(authenticationSection);
        }

        /// <summary>
        /// Configure basic authentication so we can use tokens.
        /// </summary>
        /// <param name="services">Services.</param>
        private void ConfigureAuthentication(IServiceCollection services)
        {
            var authenticationSection = Configuration.GetSection(AuthenticationSection);
            var authenticationSettings = authenticationSection.Get<AuthenticationSettings>();

            var key = Encoding.ASCII.GetBytes(authenticationSettings.Secret);

            services.AddAuthentication(x =>
            {
                x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            }).AddJwtBearer(x =>
            {
                x.RequireHttpsMetadata = false;
                x.SaveToken = true;
                x.TokenValidationParameters = new TokenValidationParameters()
                {
                    ValidateIssuerSigningKey = true,
                    IssuerSigningKey = new SymmetricSecurityKey(key),
                    ValidateIssuer = false,
                    ValidateAudience = false,
                };
            });
        }
    }
}